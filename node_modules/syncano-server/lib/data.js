'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _formData = require('form-data');

var _formData2 = _interopRequireDefault(_formData);

var _lodash = require('lodash.set');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.get');

var _lodash4 = _interopRequireDefault(_lodash3);

var _lodash5 = require('lodash.merge');

var _lodash6 = _interopRequireDefault(_lodash5);

var _queryBuilder = require('./query-builder');

var _queryBuilder2 = _interopRequireDefault(_queryBuilder);

var _errors = require('./errors');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Syncano server
 * @property {Function} query Instance of syncano DataObject
 */
var Data = function (_QueryBuilder) {
  _inherits(Data, _QueryBuilder);

  function Data() {
    _classCallCheck(this, Data);

    return _possibleConstructorReturn(this, (Data.__proto__ || Object.getPrototypeOf(Data)).apply(this, arguments));
  }

  _createClass(Data, [{
    key: 'url',
    value: function url(id) {
      var _instance = this.instance,
          instanceName = _instance.instanceName,
          className = _instance.className;

      var url = (0, _utils.buildInstanceURL)(instanceName) + '/classes/' + className + '/objects/' + (id ? id + '/' : '');

      if (this._url !== undefined) {
        url = this._url;
      }

      var query = _querystring2.default.stringify(this.query);

      return query ? url + '?' + query : url;
    }
  }, {
    key: '_batchBodyBuilder',
    value: function _batchBodyBuilder(body) {
      var _instance2 = this.instance,
          instanceName = _instance2.instanceName,
          className = _instance2.className,
          apiVersion = _instance2.apiVersion;

      var path = '/' + apiVersion + '/instances/' + instanceName + '/classes/' + className + '/objects/';

      return body.reduce(function (data, item) {
        var singleRequest = {
          method: 'POST',
          path: path
        };

        if (Array.isArray(item)) {
          singleRequest.method = 'PATCH';
          singleRequest.path = '' + path + item[0] + '/';
          singleRequest.body = JSON.stringify(item[1]);
        } else if (isNaN(item) === false) {
          singleRequest.method = 'DELETE';
          singleRequest.path = '' + path + item + '/';
        } else {
          singleRequest.body = JSON.stringify(item);
        }

        data.requests.push(singleRequest);

        return data;
      }, { requests: [] });
    }
  }, {
    key: '_batchFetchObject',
    value: function _batchFetchObject(body) {
      var instanceName = this.instance.instanceName;


      return {
        url: (0, _utils.buildInstanceURL)(instanceName) + '/batch/',
        method: 'POST',
        body: JSON.stringify(this._batchBodyBuilder(body))
      };
    }

    /**
     * List objects matching query.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * // Get all posts
     * const posts = await data.posts.list()
     * @example {@lang javascript}
     * // Get 10 posts
     * const posts = await data.posts.take(10).list()
     */

  }, {
    key: 'list',
    value: function list() {
      var _this2 = this;

      var result = [];
      var self = this;
      var baseUrl = this.baseUrl,
          relationships = this.relationships,
          instance = this.instance,
          mappedFields = this.mappedFields,
          _mapFields = this._mapFields;

      var fetch = this.fetch.bind(this);
      var pageSize = this.query.page_size || 0;

      return new Promise(function (resolve, reject) {
        request(_this2.url());

        function request(url) {
          fetch(url).then(saveToResult).then(loadNextPage).then(resolveRelatedModels).then(replaceCustomTypesWithValue).then(mapResultFields).then(resolveIfFinished).catch(function (err) {
            return reject(err);
          });
        }

        function saveToResult(response) {
          result = result.concat(response.objects);

          return response;
        }

        function loadNextPage(response) {
          var hasNextPageMeta = response.next;
          var hasNotEnoughResults = pageSize === 0 || pageSize > result.length;

          if (hasNextPageMeta && hasNotEnoughResults) {
            request('' + baseUrl + response.next);
          } else {
            return true;
          }
        }

        function resolveRelatedModels(shouldResolve) {
          if (shouldResolve === false) {
            return;
          }

          return new Promise(function (resolve, reject) {
            if (relationships.length === 0) {
              resolve(true);
            }

            var resolvers = relationships.map(function (reference) {
              return new Promise(function (resolve, reject) {
                var empty = {
                  target: reference,
                  items: []
                };

                if (result[0] === undefined) {
                  resolve(empty);
                }

                if (result[0][reference] === undefined) {
                  throw new Error('Invalid reference name "' + reference + '"');
                }

                // Search for rows with references
                var references = result.filter(function (row) {
                  return row[reference];
                }).map(function (row) {
                  return row[reference];
                });

                // No references so resolve with empty array
                if (references.length === 0) {
                  resolve(empty);
                }

                var target = references[0].target;

                var load = new Data();
                var ids = references.map(function (item) {
                  return item.value;
                });

                ids = Array.isArray(ids[0]) ? ids[0] : ids;

                if (target === 'user') {
                  load._url = (0, _utils.buildInstanceURL)(instance.instanceName) + '/users/';
                }

                load.instance = self.instance;
                load.instance.className = target;

                load.where('id', 'in', ids).list().then(function (items) {
                  resolve({ target: reference, items: items });
                }).catch(reject);
              });
            });

            Promise.all(resolvers).then(function (models) {
              result = result.map(function (item) {
                models.forEach(function (_ref) {
                  var target = _ref.target,
                      items = _ref.items;

                  var related = self._getRelatedObjects(item[target], items);

                  item[target] = related || item[target];
                });

                return item;
              });

              resolve(true);
            }).catch(reject);
          });
        }

        function replaceCustomTypesWithValue(shouldResolve) {
          if (shouldResolve === false) {
            return;
          }

          result = result.map(function (item) {
            Object.keys(item).forEach(function (key) {
              var value = item[key];
              var isObject = value instanceof Object && !Array.isArray(value);
              var hasType = isObject && value.type !== undefined;
              var hasTarget = isObject && value.target !== undefined;
              var hasValue = isObject && value.value !== undefined;

              if (isObject && hasType && hasTarget && hasValue) {
                item[key] = value.value;
              }
            });

            return item;
          });

          return true;
        }

        function mapResultFields(shouldResolve) {
          if (shouldResolve === false) {
            return;
          }

          result = _mapFields(result, mappedFields);

          return true;
        }

        function resolveIfFinished(shouldResolve) {
          if (shouldResolve) {
            if (pageSize !== 0) {
              result = result.slice(0, pageSize);
            }

            resolve(result);
          }
        }
      });
    }
  }, {
    key: '_mapFields',
    value: function _mapFields(items, fields) {
      return fields.length === 0 ? items : items.map(function (item) {
        return Object.keys(fields).reduce(function (all, key) {
          return (0, _lodash2.default)(all, fields[key] || key, (0, _lodash4.default)(item, key));
        }, {});
      });
    }
  }, {
    key: '_getRelatedObjects',
    value: function _getRelatedObjects(reference, items) {
      if (!reference) {
        return null;
      }

      if (Array.isArray(reference.value)) {
        return items.filter(function (obj) {
          return reference.value.indexOf(obj.id) >= 0;
        });
      }

      return items.find(function (obj) {
        return obj.id === reference.value;
      });
    }

    /**
     * Get first element matching query or return null.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.where('status', 'published').first()
     */

  }, {
    key: 'first',
    value: function first() {
      return this.take(1).list().then(function (response) {
        return response[0] || null;
      });
    }

    /**
     * Get first element matching query or throw error
     *
     * @example {@lang javascript}
     * const posts = await data.posts.where('status', 'published').firstOrFail()
     */

  }, {
    key: 'firstOrFail',
    value: function firstOrFail() {
      var _this3 = this;

      return new Promise(function (resolve, reject) {
        _this3.first().then(function (object) {
          return object ? resolve(object) : reject(new _errors.NotFoundError());
        }).catch(function () {
          reject(new _errors.NotFoundError());
        });
      });
    }

    /**
     * Get the first record matching the attributes or create it.
     *
     * @example {@lang javascript}
     * const post = await data.posts
     *   .updateOrCreate({name: 'value to match'}, {content: 'value to update'})
     */

  }, {
    key: 'firstOrCreate',
    value: function firstOrCreate(attributes) {
      var _this4 = this;

      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var query = this._toWhereArray(attributes);

      return this.where(query).firstOrFail().catch(function () {
        return _this4.create((0, _lodash6.default)(attributes, values));
      });
    }

    /**
     * Create or update a record matching the attributes, and fill it with values.
     *
     * @example {@lang javascript}
     * const post = await data.posts
     *   .updateOrCreate({name: 'value to match'}, {content: 'value to update'})
     */

  }, {
    key: 'updateOrCreate',
    value: function updateOrCreate(attributes) {
      var _this5 = this;

      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var query = this._toWhereArray(attributes);

      return this.where(query).firstOrFail().then(function (res) {
        return _this5.update(res.id, values);
      }).catch(function () {
        return _this5.create((0, _lodash6.default)(attributes, values));
      });
    }
  }, {
    key: '_toWhereArray',
    value: function _toWhereArray(attributes) {
      return Object.keys(attributes).map(function (key) {
        return [key, 'eq', attributes[key]];
      });
    }

    /**
     * Get single object by id or objects list if ids passed as array.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.find(4)
     * @example {@lang javascript}
     * const posts = await data.posts.find([20, 99, 125])
     */

  }, {
    key: 'find',
    value: function find(ids) {
      if (Array.isArray(ids)) {
        return this.where('id', 'in', ids).list();
      }

      return this.where('id', 'eq', ids).first();
    }

    /**
     * Same as #find method but throws error for no results.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.findOrFail(4)
     * @example {@lang javascript}
     * const posts = await data.posts.findOrFail([20, 99, 125])
     * @example {@lang javascript}
     * // Will throw error if at lest one of records was not found
     * const posts = await data.posts.findOrFail([20, 99, 125], true)
     */

  }, {
    key: 'findOrFail',
    value: function findOrFail(ids) {
      var _this6 = this;

      return new Promise(function (resolve, reject) {
        _this6.find(ids).then(function (response) {
          var shouldThrow = Array.isArray(ids) ? response.length !== ids.length : response === null;

          return shouldThrow ? reject(new _errors.NotFoundError()) : resolve(response);
        }).catch(function () {
          reject(new _errors.NotFoundError());
        });
      });
    }

    /**
     * Number of objects to get.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.take(500).list()
     */

  }, {
    key: 'take',
    value: function take(count) {
      return this.withQuery({ page_size: count }); // eslint-disable-line camelcase
    }

    /**
     * Set order of fetched objects.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.orderBy('created_at', 'DESC').list()
     */

  }, {
    key: 'orderBy',
    value: function orderBy(column) {
      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';

      direction = direction.toLowerCase();
      direction = direction === 'desc' ? '-' : '';

      return this.withQuery({
        order_by: '' + direction + column // eslint-disable-line camelcase
      });
    }

    /**
     * Filter rows.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.where('status', 'in', ['draft', 'published']).list()
     * @example {@lang javascript}
     * const posts = await data.posts.where('status', 'published').list()
     * @example {@lang javascript}
     * const posts = await data.posts.where('created_at', 'gt' '2016-02-13').list()
     * @example {@lang javascript}
     * const posts = await data.posts.where('user.id', 30).list()
     * @example {@lang javascript}
     * const posts = await data.posts.where('user.full_name', 'contains', 'John').list()
     */

  }, {
    key: 'where',
    value: function where(column, operator, value) {
      var _this7 = this;

      if (Array.isArray(column)) {
        column.map(function (_ref2) {
          var _ref3 = _slicedToArray(_ref2, 3),
              itemColumn = _ref3[0],
              itemOperator = _ref3[1],
              itemValue = _ref3[2];

          return _this7.where(itemColumn, itemOperator, itemValue);
        });

        return this;
      }
      operator = this._normalizeWhereOperator(operator);

      var whereOperator = value ? '_' + operator : '_eq';
      var whereValue = value === undefined ? operator : value;

      var currentQuery = JSON.parse(this.query.query || '{}');

      var nextQuery = column.split('.').reverse().reduce(function (child, item) {
        return _defineProperty({}, item, child === null ? _defineProperty({}, whereOperator, whereValue) : {
          _is: child
        });
      }, null);

      var query = (0, _lodash6.default)({}, currentQuery, nextQuery);

      return this.withQuery({ query: JSON.stringify(query) });
    }
  }, {
    key: '_normalizeWhereOperator',
    value: function _normalizeWhereOperator(operator) {
      var operators = {
        '<': 'lt',
        '<=': 'lte',
        '>': 'gt',
        '>=': 'gte',
        '=': 'eq',
        '!=': 'neq',
        '<>': 'neq'
      };

      return operators[operator] || operator;
    }

    /**
     * Whitelist returned keys.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.users.fields('name', 'email as username')->list()
     */

  }, {
    key: 'fields',
    value: function fields() {
      for (var _len = arguments.length, _fields = Array(_len), _key = 0; _key < _len; _key++) {
        _fields[_key] = arguments[_key];
      }

      if (Array.isArray(_fields[0])) {
        _fields = _fields[0];
      }

      var fieldsToMap = _fields.map(function (field) {
        var _field$match = field.match(/([\w_\-.]*)(\sas\s)?(.*)?/),
            _field$match2 = _slicedToArray(_field$match, 4),
            from = _field$match2[1],
            to = _field$match2[3];

        return _defineProperty({}, from, to);
      });

      this.withMappedFields(fieldsToMap);

      return this;
    }

    /**
     * Expand references and relationships.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * data.posts.with('author').list()
     * @example {@lang javascript}
     * data.posts.with(['author', 'last_editor']).list()
     */

  }, {
    key: 'with',
    value: function _with() {
      for (var _len2 = arguments.length, models = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        models[_key2] = arguments[_key2];
      }

      var relationships = Array.isArray(models[0]) ? models[0] : models;

      return this.withRelationships(relationships);
    }

    /**
     * Get values of single column.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * data.posts.where('id', 10).pluck('title')
     */

  }, {
    key: 'pluck',
    value: function pluck(column) {
      return this.list().then(function (items) {
        return items.map(function (item) {
          return item[column];
        });
      });
    }

    /**
     * Get value of single record column field.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * data.posts.where('id', 10).value('title')
     */

  }, {
    key: 'value',
    value: function value(column) {
      return this.first().then(function (item) {
        return item[column];
      });
    }

    /**
     * Create new object.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const posts = await data.posts.create({
     *   title: 'Example post title',
     *   content: 'Lorem ipsum dolor sit amet.'
     * })
     * data.posts.create([
     *  { content: 'Lorem ipsum!' },
     *  { content: 'More lorem ipsum!' }
     * ])
     */

  }, {
    key: 'create',
    value: function create(body) {
      var headers = null;
      var fetchObject = {
        url: this.url(),
        method: 'POST',
        body: JSON.stringify(body)
      };

      if (body instanceof _formData2.default) {
        fetchObject.body = body;
        headers = body.getHeaders();
      } else if (Array.isArray(body)) {
        fetchObject = this._batchFetchObject(body);
      }

      return this.fetch(fetchObject.url, fetchObject, headers);
    }

    /**
     * Update object in database.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * data.posts.update(55, { content: 'No more lorem ipsum!' })
     * data.posts.update([
     *  [55, { content: 'No more lorem ipsum!' }],
     *  [56, { content: 'No more lorem ipsum!' }]
     * ])
     * data.posts.update({title: 'Update all posts title'})
     * data.flights
     *   .where('active', 1)
     *   .where('destination', 'Warsaw')
     *   .update({delayed: 1})
     */

  }, {
    key: 'update',
    value: function update(id, body) {
      var _this8 = this;

      var isQueryUpdate = (typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object' && id !== null && !Array.isArray(id);
      var fetchObject = {
        url: this.url(id),
        method: 'PATCH',
        body: JSON.stringify(body)
      };

      if (isQueryUpdate) {
        return this.list().then(function (items) {
          var ids = items.map(function (item) {
            return [item.id, id];
          });

          fetchObject = _this8._batchFetchObject(ids);

          return _this8.fetch(fetchObject.url, fetchObject);
        });
      }

      if (Array.isArray(id)) {
        fetchObject = this._batchFetchObject(id);
      }

      return this.fetch(fetchObject.url, fetchObject);
    }

    /**
     * Remove object from database.
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * data.posts.delete(55)
     * data.posts.delete([55, 56, 57])
     * data.posts.delete()
     * data.posts.where('draft', 1).delete()
     */

  }, {
    key: 'delete',
    value: function _delete(id) {
      var _this9 = this;

      var isQueryDelete = id === undefined;
      var fetchObject = {
        url: this.url(id),
        method: 'DELETE'
      };

      if (isQueryDelete) {
        return this.list().then(function (items) {
          var ids = items.map(function (item) {
            return item.id;
          });

          fetchObject = _this9._batchFetchObject(ids);

          return _this9.fetch(fetchObject.url, fetchObject);
        });
      }

      if (Array.isArray(id)) {
        fetchObject = this._batchFetchObject(id);
      }

      return this.fetch(fetchObject.url, fetchObject);
    }
  }]);

  return Data;
}(_queryBuilder2.default);

exports.default = Data;
module.exports = exports['default'];