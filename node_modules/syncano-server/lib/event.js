'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _queryBuilder = require('./query-builder');

var _queryBuilder2 = _interopRequireDefault(_queryBuilder);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Syncano account query builder
 * @property {Function}
 */
var Event = function (_QueryBuilder) {
  _inherits(Event, _QueryBuilder);

  function Event() {
    _classCallCheck(this, Event);

    return _possibleConstructorReturn(this, (Event.__proto__ || Object.getPrototypeOf(Event)).apply(this, arguments));
  }

  _createClass(Event, [{
    key: 'url',
    value: function url() {
      var instanceName = this.instance.instanceName;

      return (0, _utils.buildInstanceURL)(instanceName) + '/triggers/emit/';
    }

    /**
     * Emit event
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const instance = await event.emit('signal_name', payload={})
     */

  }, {
    key: 'emit',
    value: function emit(signalString, payload) {
      var _this2 = this;

      var fetch = this.fetch.bind(this);

      var _Event$_splitSignal = Event._splitSignal(signalString),
          socket = _Event$_splitSignal.socket,
          signal = _Event$_splitSignal.signal;

      var signalParams = [];

      if (socket) {
        signalParams.push(socket);
      } else {
        signalParams.push(META.socket);
      }

      signalParams.push('.');
      signalParams.push(signal);

      return new Promise(function (resolve, reject) {
        var options = {
          method: 'POST',
          body: JSON.stringify({
            signal: signalParams.join(''),
            payload: payload
          })
        };

        fetch(_this2.url(), options).then(resolve).catch(reject);
      });
    }
  }], [{
    key: '_splitSignal',
    value: function _splitSignal(signalString) {
      var splited = signalString.split('.');
      if (splited.length === 1) {
        return { signal: splited[0] };
      }
      return {
        socket: splited[0],
        signal: splited[1]
      };
    }
  }]);

  return Event;
}(_queryBuilder2.default);

exports.default = Event;
module.exports = exports['default'];