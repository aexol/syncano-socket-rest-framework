'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _queryBuilder = require('./query-builder');

var _queryBuilder2 = _interopRequireDefault(_queryBuilder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Connection between scokets.
 * @property {Function}
 * @example {@lang javascript}
 * const latestTags = await socket.get('tags/list', { sort: 'latest' })
 * const createdTag = await socket.post('tags/create', { name: 'nature' })
 */
var Socket = function (_QueryBuilder) {
  _inherits(Socket, _QueryBuilder);

  function Socket() {
    _classCallCheck(this, Socket);

    return _possibleConstructorReturn(this, (Socket.__proto__ || Object.getPrototypeOf(Socket)).apply(this, arguments));
  }

  _createClass(Socket, [{
    key: 'post',
    value: function post(endpoint) {
      var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var fetch = this.fetch.bind(this);

      return fetch(this._url(endpoint), _extends({
        method: 'POST',
        body: this._parseBody(body)
      }, options));
    }
  }, {
    key: 'get',
    value: function get(endpoint) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      return this.post(endpoint, _extends({}, data, { _method: 'GET' }), options);
    }
  }, {
    key: 'delete',
    value: function _delete(endpoint) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      return this.post(endpoint, _extends({}, data, { _method: 'DELETE' }), options);
    }
  }, {
    key: 'put',
    value: function put(endpoint) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      return this.post(endpoint, _extends({}, data, { _method: 'PUT' }), options);
    }
  }, {
    key: 'patch',
    value: function patch(endpoint) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      return this.post(endpoint, _extends({}, data, { _method: 'PATCH' }), options);
    }
  }, {
    key: '_url',
    value: function _url(endpoint) {
      var _instance = this.instance,
          instanceName = _instance.instanceName,
          spaceHost = _instance.spaceHost;


      return 'https://' + instanceName + '.' + spaceHost + '/' + endpoint + '/';
    }
  }, {
    key: '_parseBody',
    value: function _parseBody(body) {
      var isBodyAnObject = (typeof body === 'undefined' ? 'undefined' : _typeof(body)) === 'object';

      return isBodyAnObject ? JSON.stringify(_extends({}, body)) : body;
    }
  }]);

  return Socket;
}(_queryBuilder2.default);

exports.default = Socket;
module.exports = exports['default'];