'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _data = require('./data');

var _data2 = _interopRequireDefault(_data);

var _users = require('./users');

var _users2 = _interopRequireDefault(_users);

var _account = require('./account');

var _account2 = _interopRequireDefault(_account);

var _instance = require('./instance');

var _instance2 = _interopRequireDefault(_instance);

var _event = require('./event');

var _event2 = _interopRequireDefault(_event);

var _socket = require('./socket');

var _socket2 = _interopRequireDefault(_socket);

var _response = require('./response');

var _response2 = _interopRequireDefault(_response);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _channel = require('./channel');

var _channel2 = _interopRequireDefault(_channel);

var _class2 = require('./class');

var _class3 = _interopRequireDefault(_class2);

var _settings = require('./settings');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var server = function server() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var genInstanceConfig = function genInstanceConfig(className) {
    var config = Object.assign({}, {
      token: (0, _settings.getToken)(),
      instanceName: (0, _settings.getInstanceName)(),
      host: (0, _settings.getHost)(),
      spaceHost: (0, _settings.getSpaceHost)(),
      apiVersion: _settings.SYNCANO_API_VERSION,
      className: className
    }, options);

    return config;
  };

  var instanceConfig = genInstanceConfig();

  var users = new _users2.default();
  users.instance = instanceConfig;
  var event = new _event2.default();
  event.instance = instanceConfig;
  var channel = new _channel2.default();
  channel.instance = instanceConfig;
  var socket = new _socket2.default();
  socket.instance = instanceConfig;
  var _class = new _class3.default();
  _class.instance = instanceConfig;

  var account = new _account2.default({ accountKey: options.accountKey });
  var instance = new _instance2.default({ accountKey: options.accountKey });

  return {
    users: users,
    account: account,
    instance: instance,
    event: event,
    channel: channel,
    socket: socket,
    _class: _class,
    logger: _logger2.default,
    response: _response2.default,
    data: new Proxy(new _data2.default(), {
      get: function get(target, className) {
        var data = new _data2.default();
        data.instance = genInstanceConfig(className);
        return data;
      }
    })
  };
};

exports.default = server;
module.exports = exports['default'];