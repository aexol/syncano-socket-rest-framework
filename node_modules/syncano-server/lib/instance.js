'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _queryBuilder = require('./query-builder');

var _queryBuilder2 = _interopRequireDefault(_queryBuilder);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Syncano account query builder
 * @property {Function}
 */
var Instance = function (_QueryBuilder) {
  _inherits(Instance, _QueryBuilder);

  function Instance(options) {
    _classCallCheck(this, Instance);

    var _this = _possibleConstructorReturn(this, (Instance.__proto__ || Object.getPrototypeOf(Instance)).call(this));

    _this.accountKey = options.accountKey;
    return _this;
  }

  _createClass(Instance, [{
    key: 'url',
    value: function url(instanceName) {
      var baseUrl = (0, _utils.buildSyncanoURL)() + '/instances/';

      return instanceName ? '' + baseUrl + instanceName + '/' : baseUrl;
    }

    /**
     * Create Syncano instance
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * const instance = await instance.create({name: 'new-instance', description: 'description'})
     */

  }, {
    key: 'create',
    value: function create(params) {
      var _this2 = this;

      var fetch = this.nonInstanceFetch.bind(this);

      return new Promise(function (resolve, reject) {
        var headers = {
          'X-API-KEY': _this2.accountKey
        };
        var options = {
          method: 'POST',
          body: JSON.stringify(params)
        };
        fetch(_this2.url(), options, headers).then(resolve).catch(reject);
      });
    }

    /**
     * Delete Syncano instance
     *
     * @returns {Promise}
     *
     * @example {@lang javascript}
     * await instance.delete('new-instance')
     */

  }, {
    key: 'delete',
    value: function _delete(instanceName) {
      var _this3 = this;

      var fetch = this.nonInstanceFetch.bind(this);

      return new Promise(function (resolve, reject) {
        var headers = {
          'X-API-KEY': _this3.accountKey
        };
        var options = {
          method: 'DELETE'
        };
        fetch(_this3.url(instanceName), options, headers).then(resolve).catch(reject);
      });
    }
  }]);

  return Instance;
}(_queryBuilder2.default);

exports.default = Instance;
module.exports = exports['default'];