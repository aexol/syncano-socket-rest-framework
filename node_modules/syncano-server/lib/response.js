'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Unified response helper
 * @property {Function}
 */

var Response = function () {
  function Response() {
    var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
    var mimetype = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'text/plain';
    var headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck(this, Response);

    this._content = content;
    this._status = status;
    this._mimetype = mimetype;
    this._headers = headers;

    if (content) {
      this._make();
    }
  }

  _createClass(Response, [{
    key: '_make',
    value: function _make() {
      var isLocal = !global.setResponse || !global.HttpResponse;
      var args = [this._status, this._content, this._mimetype, this._headers];

      if (isLocal) {
        console.log(args);
        return args;
      }

      global.setResponse(new (Function.prototype.bind.apply(global.HttpResponse, [null].concat(args)))());

      process.exit(0); // eslint-disable-line unicorn/no-process-exit
    }
  }]);

  return Response;
}();

var response = function response(content, status, mimetype, headers) {
  return new Response(content, status, mimetype, headers);
};

response.header = function (key, value) {
  response._headers = _extends({}, response._headers, _defineProperty({}, key, value));

  return response;
};

response.json = function (content) {
  var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;

  return new Response(JSON.stringify(content), status, 'application/json', response._headers);
};

exports.default = response;
module.exports = exports['default'];