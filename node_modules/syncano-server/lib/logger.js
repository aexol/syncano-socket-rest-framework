'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Debug your code.
 * @property {Function}
 */

/* global ARGS */

var LEVELS = ['error', 'warn', 'info', 'debug'];

var Logger = function () {
  function Logger(_ref) {
    var _this = this;

    var scope = _ref.scope,
        callback = _ref.callback,
        levels = _ref.levels;

    _classCallCheck(this, Logger);

    this._start = null;
    this._scope = scope;
    this._callback = callback;

    levels.forEach(function (level) {
      _this[level] = _this._makePrinter.bind(_this, level);
    });
  }

  _createClass(Logger, [{
    key: '_makePrinter',
    value: function _makePrinter() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this._start = this._start || this._getNow();
      this._level = args.shift();

      var date = this._print.apply(this, args);

      if (this._callback) {
        this._callback({ args: args, date: date, level: this._level });
      }

      this._level = null;
    }
  }, {
    key: '_pad',
    value: function _pad(width, string, padding) {
      return width <= string.length ? string : this._pad(width, padding + string, padding);
    }
  }, {
    key: '_print',
    value: function _print() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      // Time
      var now = this._getNow();
      var diff = '+' + this._calculateDiff(this._start, now);
      var time = this._getNowString(now).split(' ')[1];

      // Level
      var level = this._pad(5, '' + this._level, ' ');
      args = args.map(this._parseArg).join(' ');

      console.log(level + ':', time, this._scope, args, diff, 'ms');

      return now;
    }
  }, {
    key: '_shouldLog',
    value: function _shouldLog(scope) {
      if (ARGS && ARGS.DEBUG) {
        if (typeof ARGS.DEBUG === 'boolean') {
          return ARGS.DEBUG;
        }

        var vars = ARGS.DEBUG.split(',');
        var excluded = vars.filter(function (item) {
          return item.startsWith('-');
        }).map(function (item) {
          return item.replace(/^-/, '');
        });

        var matchAll = vars.filter(function (item) {
          return item === '*';
        }).length;
        var isWhitelisted = vars.indexOf(scope) >= 0;
        var isExcluded = excluded.indexOf(scope) >= 0;

        return (matchAll || isWhitelisted) && !isExcluded;
      }

      return false;
    }
  }, {
    key: '_parseArg',
    value: function _parseArg(arg) {
      var isObject = arg !== null && (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object';

      if (isObject) {
        return '\n\n  ' + JSON.stringify(arg, null, 2).split('\n').join('\n  ') + '\n\n';
      }

      return arg;
    }
  }, {
    key: '_getNow',
    value: function _getNow() {
      return new Date();
    }
  }, {
    key: '_getNowString',
    value: function _getNowString(date) {
      return date.toISOString().replace(/T/, ' ') // Replace T with a space
      .replace(/\..+/, ''); // Delete the dot and everything after
    }
  }, {
    key: '_calculateDiff',
    value: function _calculateDiff(t1, t2) {
      return (t2.getTime() - t1.getTime()) / 1000;
    }
  }]);

  return Logger;
}();

var logger = function logger(scope) {
  return new Logger({
    scope: scope,
    callback: logger._callback,
    levels: logger._levels || LEVELS
  });
};

logger.levels = function (levels) {
  if (!Array.isArray(levels)) {
    throw new TypeError('Levels must be array of strings.');
  }

  logger._levels = levels;
};

logger.listen = function (callback) {
  if (typeof callback !== 'function') {
    throw new TypeError('Callback must be a function.');
  }

  logger._callback = callback;
};

exports.default = logger;
module.exports = exports['default'];